import os
from dotenv import load_dotenv
import telebot
from telebot import types
from functools import partial
import json
import shutil
from uuid import uuid4


load_dotenv('token.env')
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not TOKEN:
    print("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª token.env.")
    exit(1)

bot = telebot.TeleBot(TOKEN)

# –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
ducks = {
    1: {'name': '–£—Ç–∫–∞-–ø–∏–ª–æ—Ç ‚úàÔ∏è', 'description': '–°—Ç–∏–ª—å–Ω–∞—è —É—Ç–∫–∞ –≤ –ª—ë—Ç–Ω—ã—Ö –æ—á–∫–∞—Ö', 'price': '799 —Ä—É–±', 'photo': 'duck1.jpg'},
    2: {'name': '–£—Ç–∫–∞-–ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–π üëÆ', 'description': '–ù–∞—Å—Ç–æ—è—â–∏–π —Å—Ç—Ä–∞–∂ –ø–æ—Ä—è–¥–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ', 'price': '899 —Ä—É–±', 'photo': 'duck2.jpg'}
}

user_states = {}


folders = os.getenv("img").split(",") 

for folder_name in folders:
    try:
        os.mkdir(folder_name)
        print(f"–ü–∞–ø–∫–∞ '{folder_name}' —Å–æ–∑–¥–∞–Ω–∞.")
    except FileExistsError:
        print(f"–ü–∞–ø–∫–∞ '{folder_name}' –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ '{folder_name}': {e}")

def start_2(message, model_name=None):
    if message.from_user.id == 1965630668 or message.from_user.id == 1109848616:
        if not model_name:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return

        filename = f"database/{model_name}.txt"
        
        try:
            with open(filename, "a", encoding="utf-8") as file:
                file.write(f"{message.text}\n")
            
            bot.send_message(message.chat.id, f"‚úÖ –ë—Ä–µ–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {model_name}")
        
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
    else:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

back = types.InlineKeyboardMarkup()
back.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back1'))

back2 = types.InlineKeyboardMarkup()
back2.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back2'))

@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if message.chat.id in user_states:
        del user_states[message.chat.id]
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç üõí", callback_data='shop'),
        types.InlineKeyboardButton("–¢–µ—Ö –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üéô", callback_data='support'),
        types.InlineKeyboardButton("WhatsApp üìó", url="https://wa.me/+79250648771")
    )
    
    text = """
*üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GRAN TURISMO! üèÅ*

*–í–∞—à —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–º–∏—É–º-—Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π!*

‚ú® *–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?*
‚úîÔ∏è *–®–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç*: –£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ‚Äî –æ—Ç –∑–∞–ø—á–∞—Å—Ç–µ–π –∏ –º–∞—Å–µ–ª –¥–æ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å—Å—è –∏–∑ —Å–µ—Ä–æ–π –º–∞—Å—Å—ã.  
‚úîÔ∏è *–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7*: –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.  
‚úîÔ∏è *–ß–µ—Å—Ç–Ω—ã–µ —Ü–µ–Ω—ã*: –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–µ —Ü–µ–Ω—ã –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –Ω–∞—Ü–µ–Ω–æ–∫, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∫–∞—á–µ—Å—Ç–≤–æ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞—Ç—Ä–∞—Ç.  
‚úîÔ∏è *–ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞*: –ú—ã —Ç—â–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å.

*–í—ã–±–µ—Ä–∏—Ç–µ GRAN TURISMO ‚Äî –∏ –¥–∞–π—Ç–µ –≤–∞—à–µ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é –ª—É—á—à–µ–µ!*
"""
    
    try:
        with open("icon.jpg", 'rb') as photo:
            if message.from_user.id != 1965630668 and message.from_user.id != 1109848616:
                bot.send_photo(message.chat.id, photo, caption=text, reply_markup=markup, parse_mode='Markdown')
            else:
                 markup = types.InlineKeyboardMarkup(row_width=1)
                 markup.add(
                     types.InlineKeyboardButton("–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç üõí", callback_data='shop'),
                     types.InlineKeyboardButton("–¢–µ—Ö –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üéô", callback_data='support'),
                     types.InlineKeyboardButton("WhatsApp üìó", url="https://wa.me/+79250648771"),
                     types.InlineKeyboardButton("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞", callback_data="admin")
                     )
                 bot.send_photo(message.chat.id, photo, caption=text, reply_markup=markup, parse_mode='Markdown')
    except FileNotFoundError:
        bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='Markdown')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (–¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Å–∫—Ä–∏–ø—Ç–∞)
user_stats = {}

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    global user_stats
    try:
        if call.data == 'shop':
            show_categories(call)
        elif call.data == 'duck':
            send_duck(call, 1)
        elif call.data == 'next_duck':
            current = get_current_duck_id(call)
            send_duck(call, current + 1)
        elif call.data == 'prev_duck':
            current = get_current_duck_id(call)
            send_duck(call, current - 1)
        elif call.data == 'back1':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send_welcome(call.message)
        elif call.data == 'back2':
            show_categories(call)
        elif call.data.startswith('buy-'):
            buy(call)
        elif call.data == 'cancel_order':
            cancel_order(call)
        elif call.data == 'admin':
            if call.from_user.id == 1965630668 or call.from_user.id == 1109848616:
                markup = types.InlineKeyboardMarkup(row_width=1)
                markup.add(
                    types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ë—Ä–µ–Ω–¥ üíº", callback_data='brend'),
                    types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¢–æ–≤–∞—Ä üì¶", callback_data='product'),
                    types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back1')
                )
                bot.send_message(call.message.chat.id, "–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å", reply_markup=markup)
            else:
                bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!!")
        elif call.data == 'brend':
            if call.from_user.id == 1965630668 or call.from_user.id == 1109848616:
                markup = types.InlineKeyboardMarkup(row_width=1)
                markup.add(
                    types.InlineKeyboardButton("–ú–∞—Å–ª–∞", callback_data='set-–ú–∞—Å–ª–∞'),
                    types.InlineKeyboardButton("–ê–Ω—Ç–∏ –§—Ä–∏–∑", callback_data='set-–ê–Ω—Ç–∏–§—Ä–∏–∑'),
                    types.InlineKeyboardButton("–ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä—ã", callback_data='set-–ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä—ã'),
                    types.InlineKeyboardButton("–°–≤–µ—Ç", callback_data='set-–°–≤–µ—Ç'),
                    types.InlineKeyboardButton("–ö–æ—Å–º–µ—Ç–∏–∫–∞", callback_data='set-–ö–æ—Å–º–µ—Ç–∏–∫–∞'),
                    types.InlineKeyboardButton("–≠–º–∞–ª—å", callback_data='set-–≠–º–∞–ª—å'),
                    types.InlineKeyboardButton("–ê–≤—Ç–æ—Ö–∏–º–∏—è", callback_data='set-–ê–≤—Ç–æ—Ö–∏–º–∏—è'),
                    types.InlineKeyboardButton("–§–∏–ª—å—Ç—Ä–∞", callback_data='set-–§–∏–ª—å—Ç—Ä–∞'),
                    types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data='cancel')
                )
                bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=markup)
        elif call.data.startswith('var-'):
            category_name = call.data.split('-')[1]
            filename = f"database/{category_name}.txt"
            
            brands = []
            
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as file:
                    brands = [line.strip() for line in file.readlines() if line.strip()]
            
            if not brands:
                bot.send_message(call.message.chat.id, "‚õî –ë—Ä–µ–Ω–¥—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            for brand in brands:
                markup.add(types.InlineKeyboardButton(
                    brand, 
                    callback_data=f'brand-{category_name}-{brand}'
                ))
            
            markup.add(types.InlineKeyboardButton(
                "–ù–∞–∑–∞–¥ üîô", 
                callback_data='back2'
            ))
            
            bot.send_message(
                call.message.chat.id,
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ë—Ä–µ–Ω–¥—ã –ò–∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: *{category_name}*:",
                reply_markup=markup,
                parse_mode='Markdown'
            )
        elif call.data.startswith('set-'):
            model_name = call.data.split('-')
            tax = model_name[1]
            user_stats[call.from_user.id] = {'state': 'awaiting_brand', 'category': tax}
            markup = types.InlineKeyboardMarkup()
            cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data='cancel')
            markup.add(cancel_button)
            if call.from_user.id == 1965630668 or call.from_user.id == 1109848616:
                msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {tax}:", reply_markup=markup)
                bot.register_next_step_handler(msg, partial(start_2, model_name=tax))
            else:
                bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚ùó")
        elif call.data == "cancel":
            bot.delete_message(call.message.chat.id, call.message.message_id)
            if call.from_user.id in user_stats:
                del user_stats[call.from_user.id]
                bot.clear_step_handler_by_chat_id(call.message.chat.id)
                bot.send_message(call.message.chat.id, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")
        elif call.data == 'product':
            if call.from_user.id == 1965630668 or call.from_user.id == 1109848616:
                markup = types.InlineKeyboardMarkup(row_width=1)
                markup.add(
                    types.InlineKeyboardButton("–ú–∞—Å–ª–∞", callback_data='addprod-–ú–∞—Å–ª–∞'),
                    types.InlineKeyboardButton("–ê–Ω—Ç–∏ –§—Ä–∏–∑", callback_data='addprod-–ê–Ω—Ç–∏–§—Ä–∏–∑'),
                    types.InlineKeyboardButton("–ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä—ã", callback_data='addprod-–ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä—ã'),
                    types.InlineKeyboardButton("–°–≤–µ—Ç", callback_data='addprod-–°–≤–µ—Ç'),
                    types.InlineKeyboardButton("–ö–æ—Å–º–µ—Ç–∏–∫–∞", callback_data='addprod-–ö–æ—Å–º–µ—Ç–∏–∫–∞'),
                    types.InlineKeyboardButton("–≠–º–∞–ª—å", callback_data='addprod-–≠–º–∞–ª—å'),
                    types.InlineKeyboardButton("–ê–≤—Ç–æ—Ö–∏–º–∏—è", callback_data='addprod-–ê–≤—Ç–æ—Ö–∏–º–∏—è'),
                    types.InlineKeyboardButton("–§–∏–ª—å—Ç—Ä–∞", callback_data='addprod-–§–∏–ª—å—Ç—Ä–∞'),
                    types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data='cancel')
                )
                bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)
            else:
                bot.send_message(call.message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        elif call.data.startswith('addprod-'):
            category = call.data.split('-')[1]
            user_stats[call.from_user.id] = {
                'state': 'adding_product',
                'step': 'select_brand',
                'category': category
            }
            filename = f"database/{category}.txt"
            brands = []
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as file:
                    brands = [line.strip() for line in file.readlines() if line.strip()]
            
            if not brands:
                bot.send_message(call.message.chat.id, "‚õî –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –±—Ä–µ–Ω–¥–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±—Ä–µ–Ω–¥—ã.")
                return
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            for brand in brands:
                markup.add(types.InlineKeyboardButton(brand, callback_data=f'selectbrand-{brand}'))
            markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data='cancel'))
            bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:", reply_markup=markup)
        elif call.data.startswith('selectbrand-'):
            brand = call.data.split('-')[1]
            user_data = user_stats[call.from_user.id]
            user_data['brand'] = brand
            user_data['step'] = 'enter_name'
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data='cancel'))
            msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –±—Ä–µ–Ω–¥–∞ {brand}:", reply_markup=markup)
            bot.register_next_step_handler(msg, process_product_name)
        elif call.data.startswith('brand-'):
            parts = call.data.split('-')
            if len(parts) == 3:
                category, brand = parts[1], parts[2]
                show_products(call, category, brand)
        elif call.data.startswith('prevprod-'):
            parts = call.data.split('-')
            if len(parts) == 4:
                category, brand, index = parts[1], parts[2], int(parts[3])
                show_products(call, category, brand, index-1)
        elif call.data.startswith('nextprod-'):
            parts = call.data.split('-')
            if len(parts) == 4:
                category, brand, index = parts[1], parts[2], int(parts[3])
                show_products(call, category, brand, index+1)
        elif call.data.startswith('buyprod-'):
            product_id = call.data[8:]
            buy_product(call, product_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    

def get_current_duck_id(call):
    if call.message.content_type == 'photo':
        text = call.message.caption or ""
    else:
        text = call.message.text or ""
    
    if not text:
        return 1
    
    try:
        return int(text.split('\n')[0].split('/')[0])
    except:
        return 1

def show_categories(call):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ú–∞—Å–ª–∞", callback_data='var-–ú–∞—Å–ª–∞'),
        types.InlineKeyboardButton("–ê–Ω—Ç–∏ –§—Ä–∏–∑", callback_data='var-–ê–Ω—Ç–∏–§—Ä–∏–∑'),
        types.InlineKeyboardButton("–ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä—ã", callback_data='var-–ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä—ã'),
        types.InlineKeyboardButton("–°–≤–µ—Ç", callback_data='var-–°–≤–µ—Ç'),
        types.InlineKeyboardButton("–ö–æ—Å–º–µ—Ç–∏–∫–∞", callback_data='var-–ö–æ—Å–º–µ—Ç–∏–∫–∞'),
        types.InlineKeyboardButton("–≠–º–∞–ª—å", callback_data='var-–≠–º–∞–ª—å'),
        types.InlineKeyboardButton("–ê–≤—Ç–æ—Ö–∏–º–∏—è", callback_data='var-–ê–≤—Ç–æ—Ö–∏–º–∏—è'),
        types.InlineKeyboardButton("–§–∏–ª—å—Ç—Ä–∞", callback_data='var-–§–∏–ª—å—Ç—Ä–∞'),
        types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data='cancel')
    )
    
    caption = "üë£ –®–∞–≥ 1 –ò–∑ 3 üë£\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:"
    
    try:
        with open("icon.jpg", 'rb') as photo:
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass
            bot.send_photo(
                chat_id=call.message.chat.id,
                photo=photo,
                caption=caption,
                reply_markup=markup
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        try:
            if call.message.content_type == 'photo':
                bot.edit_message_caption(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    caption=caption,
                    reply_markup=markup
                )
            else:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=caption,
                    reply_markup=markup
                )
        except:
            bot.send_message(
                chat_id=call.message.chat.id,
                text=caption,
                reply_markup=markup
            )

def send_duck(call, duck_id):
    duck_id = max(1, min(duck_id, len(ducks)))
    duck = ducks[duck_id]
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='prev_duck'),
        types.InlineKeyboardButton(f"{duck_id}/{len(ducks)}", callback_data='none'),
        types.InlineKeyboardButton("‚û°Ô∏è", callback_data='next_duck')
    )
    markup.row(types.InlineKeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f'buy-{duck_id}'))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='back2'))
    
    text = f"{duck_id}/{len(ducks)}\n{duck['name']}\n\n{duck['description']}\n\n–¶–µ–Ω–∞: {duck['price']}"
    
    try:
        with open(duck['photo'], 'rb') as photo:
            if call.message.content_type == 'photo':
                bot.edit_message_media(
                    types.InputMediaPhoto(photo, caption=text),
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=markup
                )
            else:
                bot.send_photo(call.message.chat.id, photo, caption=text, reply_markup=markup)
    except:
        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=markup
            )
        except:
            bot.send_message(call.message.chat.id, text, reply_markup=markup)

def buy(call):
    if call.data.startswith('buy-'):
        duck_id = int(call.data.split('-')[1])
        duck = ducks[duck_id]
        bot.delete_message(call.message.chat.id, call.message.message_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        user_states[call.message.chat.id] = {
            'product': duck['name'],
            'price': duck['price'],
            'step': 'waiting_data'
        }
        
        opra = (
            "\n\n1. –§–ò–û –ü–æ–ª—É—á–∞—Ç–µ–ª—è -"
            "\n2. –ê–¥—Ä–µ—Å–Ω—ã–µ –î–∞–Ω–Ω—ã–µ:"
            "\n‚Ä¢ –ò–Ω–¥–µ–∫—Å -"
            "\n‚Ä¢ –†–µ–≥–∏–æ–Ω -"
            "\n‚Ä¢ –ì–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç -"
            "\n3. –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä -"
            "\n4. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) -"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='cancel_order'))
        
        msg = bot.send_message(
            call.message.chat.id, 
            f"–û—Ç–ª–∏—á–Ω–æ‚ùóÔ∏è, –≤–∏–∂—É –≤–∞–º –ø—Ä–∏–≥–ª—è–¥–µ–ª—Å—è/–∞—Å—å {duck['name']} –∑–∞ {duck['price']}.\n\n–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä ‚ùóÔ∏è –Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—ã–ª–∫–∏ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –±–ª–∞–Ω–∫ —Å–Ω–∏–∑—É üëáüèª {opra}", 
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_order_data)

def process_order_data(message):
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
    if chat_id not in user_states or user_states[chat_id]['step'] != 'waiting_data':
        bot.send_message(chat_id, "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[chat_id]['user_data'] = message.text
    user_states[chat_id]['step'] = 'waiting_payment'
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
    payment_markup = types.InlineKeyboardMarkup()
    payment_markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='cancel_order'))
    
    payment_text = f"""
*–ú—ã –ü–æ—á—Ç–∏ –£ –¶–µ–ª–∏ ‚ùó*

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {user_states[chat_id]['product']} –∑–∞ {user_states[chat_id]['price']}:

1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {user_states[chat_id]['price']} –Ω–∞ –∫–∞—Ä—Ç—É:
`8888 8888 8888 8888`

2. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.

*–í–Ω–∏–º–∞–Ω–∏–µ!* –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.
"""
    
    bot.send_message(
        chat_id,
        payment_text,
        reply_markup=payment_markup,
        parse_mode='Markdown'
    )
    
    # –ñ–¥–µ–º —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã
    bot.register_next_step_handler(message, process_payment)

def buy_product(call, product_id):
    print(f"–ò—â–µ–º —Ç–æ–≤–∞—Ä —Å ID: {product_id}")
    
    if not os.path.exists('database'):
        bot.send_message(call.message.chat.id, "‚õî –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã", reply_markup=back2)
        return
    
    found = False
    for filename in os.listdir('database'):
        if filename.startswith('products_') and filename.endswith('.json'):
            try:
                with open(f'database/{filename}', 'r', encoding='utf-8') as f:
                    products = json.load(f)
                    for product in products:
                        if product.get('id') == product_id:
                            print(f"–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {product['name']}")
                            found = True
                            
                            user_states[call.message.chat.id] = {
                                'product': product['name'],
                                'price': product['price'],
                                'step': 'waiting_data',
                                'product_data': product
                            }
                            
                            opra = "\n\n1. –§–ò–û –ü–æ–ª—É—á–∞—Ç–µ–ª—è -\n2. –ê–¥—Ä–µ—Å–Ω—ã–µ –î–∞–Ω–Ω—ã–µ:\n‚Ä¢ –ò–Ω–¥–µ–∫—Å -\n‚Ä¢ –†–µ–≥–∏–æ–Ω -\n‚Ä¢ –ì–æ—Ä–æ–¥ -\n3. –¢–µ–ª–µ—Ñ–æ–Ω -\n4. Email -"
                            
                            markup = types.InlineKeyboardMarkup()
                            markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_order'))
                            
                            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                            try:
                                bot.delete_message(call.message.chat.id, call.message.message_id)
                            except:
                                pass
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
                            msg = bot.send_message(
                                call.message.chat.id,
                                f"–í–∏–∂—É –í—ã –≤—ã–±—Ä–∞–ª–∏: {product['name']} —Å—Ç–æ–∏–º–æ—Å—Ç—å {product['price']}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:{opra}",
                                reply_markup=markup
                            )
                            
                            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                            bot.register_next_step_handler(msg, process_order_data)
                            break
                    if found:
                        break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename}: {e}")
    
    if not found:
        print(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        bot.send_message(
            call.message.chat.id,
            "‚õî –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
            reply_markup=back2
        )

def process_order_data(message):
    chat_id = message.chat.id
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è chat_id: {chat_id}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    if chat_id not in user_states or user_states[chat_id]['step'] != 'waiting_data':
        print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_states.get(chat_id)}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        bot.send_message(chat_id, "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    user_states[chat_id]['user_data'] = message.text
    user_states[chat_id]['step'] = 'waiting_payment'
    
    print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {message.text}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_order'))
    
    bot.send_message(
        chat_id,
        f"""*–ú—ã –ü–æ—á—Ç–∏ –£ –¶–µ–ª–∏ ‚ùó* 
–û—Ç–ø—Ä–∞–≤—å—Ç–µ {user_states[chat_id]['price']} –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã 
`1234 5678 9012 3456` (–¢-–ë–∞–Ω–∫) –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.""",
        reply_markup=markup,
        parse_mode='MarkDown'
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ
    bot.register_next_step_handler(message, process_payment)

def cancel_order(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id in user_states:
        del user_states[chat_id]

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    try:
        bot.delete_message(chat_id, call.message.message_id)
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
    bot.send_message(
        chat_id,
        "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start",
        reply_markup=back2
    )

def process_payment(message):
    chat_id = message.chat.id
    
    if chat_id not in user_states or user_states[chat_id]['step'] != 'waiting_payment':
        bot.send_message(chat_id, "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return
    
    if message.content_type == 'photo':
        admin_chat_id = 1965630668
        file_id = message.photo[-1].file_id
        product_data = user_states[chat_id].get('product_data', {})
        
        order_text = f"""
üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–¢–æ–≤–∞—Ä: {user_states[chat_id]['product']}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
–ë—Ä–µ–Ω–¥: {product_data.get('brand', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
–¶–µ–Ω–∞: {user_states[chat_id]['price']}
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:
{user_states[chat_id]['user_data']}
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–ß–∞—Ç: @{message.from_user.username or message.from_user.first_name}
ID: {chat_id}
        """
        
        bot.send_photo(admin_chat_id, file_id, order_text, parse_mode='Markdown')
        bot.send_message(chat_id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ –∏ –æ–ø–ª–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=back2)
        del user_states[chat_id]
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='cancel_order'))
        bot.send_message(chat_id, "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.", reply_markup=markup)
        bot.register_next_step_handler(message, process_payment)


def process_product_name(message):
    user_data = user_stats[message.from_user.id]
    user_data['name'] = message.text
    user_data['step'] = 'enter_price'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data='cancel'))
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 —Ä—É–±):", reply_markup=markup)
    bot.register_next_step_handler(msg, process_product_price)

def process_product_price(message):
    user_data = user_stats[message.from_user.id]
    user_data['price'] = message.text
    user_data['step'] = 'enter_description'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data='cancel'))
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_product_description)

def process_product_description(message):
    user_data = user_stats[message.from_user.id]
    user_data['description'] = message.text
    user_data['step'] = 'upload_photo'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data='cancel'))
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_product_photo)

def process_product_photo(message):
    if message.content_type != 'photo':
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.")
        bot.register_next_step_handler(msg, process_product_photo)
        return
    
    user_data = user_stats[message.from_user.id]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    product_id = str(uuid4())  # –≠—Ç–æ —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π UUID
    print(f"–°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä —Å ID: {product_id}")
    
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        photo_path = f"images/{product_id}.jpg"
        
        with open(photo_path, 'wb') as new_file:
            new_file.write(downloaded_file)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç–æ–≤–∞—Ä–µ
    product_data = {
        'id': product_id,
        'name': user_data['name'],
        'brand': user_data['brand'],
        'category': user_data['category'],
        'price': user_data['price'],
        'description': user_data['description'],
        'photo': photo_path
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    products_file = f"database/products_{user_data['category']}_{user_data['brand']}.json"
    products = []
    
    if os.path.exists(products_file):
        try:
            with open(products_file, 'r', encoding='utf-8') as f:
                products = json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
    
    products.append(product_data)
    
    try:
        with open(products_file, 'w', encoding='utf-8') as f:
            json.dump(products, f, ensure_ascii=False, indent=4)
        print(f"–¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {products_file}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
        return
    
    bot.send_message(
        message.chat.id,
        f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\nID: {product_id}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user_data['category']}\n–ë—Ä–µ–Ω–¥: {user_data['brand']}",
        reply_markup=back2
    )
    del user_stats[message.from_user.id]

def show_products(call, category, brand, product_index=0):
    products_file = f"database/products_{category}_{brand}.json"
    print(f"–ò—â–µ–º —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä–æ–≤: {products_file}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    if not os.path.exists(products_file):
        print("–§–∞–π–ª —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        bot.send_message(call.message.chat.id, "‚õî –¢–æ–≤–∞—Ä—ã —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    with open(products_file, 'r', encoding='utf-8') as f:
        products = json.load(f)
    
    if not products:
        print("–§–∞–π–ª —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç!")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        bot.send_message(call.message.chat.id, "‚õî –¢–æ–≤–∞—Ä—ã —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    product_index = max(0, min(product_index, len(products)-1))
    product = products[product_index]
    print(f"–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: {product}")  
    markup = types.InlineKeyboardMarkup()
    row_buttons = []
    if product_index > 0:
        row_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'prevprod-{category}-{brand}-{product_index}'))
    row_buttons.append(types.InlineKeyboardButton(f"{product_index+1}/{len(products)}", callback_data='none'))
    if product_index < len(products)-1:
        row_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f'nextprod-{category}-{brand}-{product_index}'))
    
    markup.row(*row_buttons)
    markup.row(types.InlineKeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f'buyprod-{product["id"]}'))
    markup.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –±—Ä–µ–Ω–¥–∞–º", callback_data=f'var-{category}'))
    
    text = f"{product['name']}\n\n{product['description']}\n\n–¶–µ–Ω–∞: {product['price']}"
    
    try:
        with open(product['photo'], 'rb') as photo:
            bot.send_photo(call.message.chat.id, photo, caption=text, reply_markup=markup)
    except:
        bot.send_message(call.message.chat.id, text, reply_markup=markup)


def start_5(message):
    verify = 1965630668
    number = message.text
    gay = message.from_user.id
    admin = types.InlineKeyboardMarkup(row_width=1)
    button1 = types.InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f'chat-{gay}')
    button2 = types.InlineKeyboardButton("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞", callback_data=f'ban-{gay}')
    admin.add(button1, button2)

    try:
        bot.reply_to(message, f"–£—Å–ø–µ—à–Ω–æ ‚úÖ\n\n–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ.", reply_markup=back)
        bot.send_message(verify, f"–ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚ùóÔ∏è‚ùóÔ∏è‚ùó\n\n{number}",reply_markup=admin)
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)